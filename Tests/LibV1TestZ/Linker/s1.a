;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/13/2011
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;#define NORMAL_DELAY     1
;#define TIMER_DELAY      2
;#define GLCD_DELAY_TYPE  TIMER_DELAY
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <glcd128x64td.h>
;#include <delay.h>
;
;#if GLCD_DELAY_TYPE == TIMER_DELAY
;// Timer 0 output compare interrupt service routine
;interrupt [TIM0_COMP] void timer0_comp_isr(void)
; 0000 0022 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0023 // Place your code here
; 0000 0024   timer_isr();
;PCODE: $0000000F VOL: 0
; 0000 0025 }
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;#endif
;
;#if GLCD_DELAY_TYPE == TIMER_DELAY
;unsigned char TCCR0_value = 0x09;
;void timer_start (void)
; 0000 002B {
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 002C   TCCR0 = TCCR0_value;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 002D }
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;void timer_stop (void)
; 0000 0030 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0031   TCCR0 = 0x08;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0032   TCNT0 = 0x00;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0033 }
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;void set_ctc_7us (void)
; 0000 0036 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0037   TCCR0_value = 0x09;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0038   OCR0 = 0x53;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0039 }
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;
;void set_ctc_10ms (void)
; 0000 003C {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 003D   TCCR0_value = 0x0D;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003E   OCR0 = 0x74;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 003F }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;
;/*void portc_tgl(void)
;{
;/}*/
;#endif
;
;// Declare your global variables here
;flash char glcd_intro_bmp[1024] = {
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  2,254,254,254,
; 254,  2,  2,  0,  0,  2,  2,254,254,254,254,  2,  2,  0,  0,  0,
;   0,  2,  2,254,  2,  2,  0,  0,126, 30,  6,  2,  2,254,254,254,
; 254,  2,  2,  6, 30,126,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,
; 255,  0,  0,  0,  0,  0,  0,255,255,255,255,  0,  0,  0,  0,  0,
;   0,  0,  0,255,  0,  0,  0,  0,  0,  0,  0,  0,  0,255,255,255,
; 255,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,128,128,128,128,  0,128,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  4,  4,  7,  7,  7,
;   7,  4,  4,  0,  0,  0,128,128,129,131,135,  7,  6,  4,  4,  4,
; 132,130,131,128,128,  0,  0,  0,  0,  0,  4,  4,  4,  7,135,135,
; 135,  4,  4,  4,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0, 14, 25, 48, 48, 48, 97, 99,199,128,  0,  0, 32,
; 224,224,  0,  0, 32,224,224,  0,  0,  0, 32,224,224, 64, 32, 32,
;  32,192,128,  0,  0,128,192, 32, 32, 32,192,128,  0,  0, 32,224,
; 224, 64, 32, 96, 96,  0,  0,  0,255,  1, 31,254,224,  0,224, 30,
;   1,255,255,  0,  0,  0,  0,  0, 32,227,227,  0,  0,  0,  0,255,
; 255,  0,  0,  0,128,192, 32, 32, 32,192,128,  0,  0,192,224, 32,
;  32, 32,224,192,  0,  0,  0,192,224, 32, 32, 32,192,192, 96, 96,
;   0,128,192, 32, 32, 32,192,128,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0, 30, 12,  8, 16, 16, 16, 16,  8,  7,  0,  0,  0,
;  15, 31, 16, 16,  8, 31, 31, 16,  0,  0,  0,255,255,  8, 16, 16,
;  16, 15,  7,  0,  0,  7, 15, 17, 17, 17, 17,  9,  0,  0, 16, 31,
;  31, 16, 16,  0,  0,  0, 16, 16, 31, 16, 16,  1, 31, 30,  1, 16,
;  16, 31, 31, 16, 16,  0,  0,  0, 16, 31, 31, 16,  0,  0, 16, 31,
;  31, 16,  0,  0,  7, 15, 17, 17, 17, 17,  9,  0,  0, 12, 30, 19,
;  17,  9, 31, 31, 16,  0,  0,185,119, 52, 52, 52, 55, 51,224,  0,
;   0,  7, 15, 17, 17, 17, 17,  9,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  2,  3,  3,  2,  2,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,128,128,224,224,128,
; 128,128,  0,  0,  0,  0,128,128,128,  0,  0,  0,  0,  0,128,128,
; 128,128,128,  0,  0,  0,  0,128,128,128,  0,128,128,128,  0,  0,
; 128,128,128,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  1,  2,  2,  2,  2,  2,  1,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 63,127, 64,
;  64, 32,  0,  0, 30, 63, 68, 68, 68, 71, 38,  0,  0, 51,123, 76,
;  68, 36,127,127, 64,  0,  0, 64,127,127, 65,  0, 64,127,127, 65,
;   0, 64,127,127, 64,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
;   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
;};
;void main(void)
; 0000 008A {
;PCODE: $00000031 VOL: 0
; 0000 008B // Declare your local variables here
; 0000 008C 
; 0000 008D // Input/Output Ports initialization
; 0000 008E // Port A initialization
; 0000 008F // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0090 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0091 PORTA=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0092 DDRA=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0093 
; 0000 0094 // Port B initialization
; 0000 0095 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0096 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0097 PORTB=0x00;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0098 DDRB=0x00;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0099 
; 0000 009A // Port C initialization
; 0000 009B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009D PORTC=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 009E DDRC=0xFF;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 009F 
; 0000 00A0 // Port D initialization
; 0000 00A1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A3 PORTD=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 00A4 DDRD=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 00A5 
; 0000 00A6 #if GLCD_DELAY_TYPE == NORMAL_DELAY
; 0000 00A7 // Timer/Counter 0 initialization
; 0000 00A8 // Clock source: System Clock
; 0000 00A9 // Clock value: Timer 0 Stopped
; 0000 00AA // Mode: Normal top=0xFF
; 0000 00AB // OC0 output: Disconnected
; 0000 00AC TCCR0=0x00;
; 0000 00AD TCNT0=0x00;
; 0000 00AE OCR0=0x00;
; 0000 00AF #elif GLCD_DELAY_TYPE == TIMER_DELAY
; 0000 00B0 // Timer/Counter 0 initialization
; 0000 00B1 // Clock source: System Clock
; 0000 00B2 // Clock value: Timer 0 Stopped
; 0000 00B3 // Mode: CTC top=OCR0
; 0000 00B4 // OC0 output: Disconnected
; 0000 00B5 TCCR0=0x08;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 00B6 TCNT0=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 00B7 OCR0 = 0x53/*((unsigned char)((_MCU_CLOCK_FREQUENCY_*7)/1000000))*/;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00B8 #endif
; 0000 00B9 
; 0000 00BA // Timer/Counter 1 initialization
; 0000 00BB // Clock source: System Clock
; 0000 00BC // Clock value: Timer1 Stopped
; 0000 00BD // Mode: Normal top=0xFFFF
; 0000 00BE // OC1A output: Discon.
; 0000 00BF // OC1B output: Discon.
; 0000 00C0 // Noise Canceler: Off
; 0000 00C1 // Input Capture on Falling Edge
; 0000 00C2 // Timer1 Overflow Interrupt: Off
; 0000 00C3 // Input Capture Interrupt: Off
; 0000 00C4 // Compare A Match Interrupt: Off
; 0000 00C5 // Compare B Match Interrupt: Off
; 0000 00C6 TCCR1A=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 00C7 TCCR1B=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 00C8 TCNT1H=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00C9 TCNT1L=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 00CA ICR1H=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00CB ICR1L=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00CC OCR1AH=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 00CD OCR1AL=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 00CE OCR1BH=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 00CF OCR1BL=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 00D0 
; 0000 00D1 // Timer/Counter 2 initialization
; 0000 00D2 // Clock source: System Clock
; 0000 00D3 // Clock value: Timer2 Stopped
; 0000 00D4 // Mode: Normal top=0xFF
; 0000 00D5 // OC2 output: Disconnected
; 0000 00D6 ASSR=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00D7 TCCR2=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00D8 TCNT2=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 00D9 OCR2=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00DA 
; 0000 00DB // External Interrupt(s) initialization
; 0000 00DC // INT0: Off
; 0000 00DD // INT1: Off
; 0000 00DE // INT2: Off
; 0000 00DF MCUCR=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00E0 MCUCSR=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00E1 
; 0000 00E2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E3 #if GLCD_DELAY_TYPE == NORMAL_DELAY
; 0000 00E4 TIMSK=0x00;
; 0000 00E5 #elif GLCD_DELAY_TYPE == TIMER_DELAY
; 0000 00E6 TIMSK=0x02;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00E7 #endif
; 0000 00E8 
; 0000 00E9 // USART initialization
; 0000 00EA // USART disabled
; 0000 00EB UCSRB=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 00EC 
; 0000 00ED // Analog Comparator initialization
; 0000 00EE // Analog Comparator: Off
; 0000 00EF // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F0 ACSR=0x80;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00F1 SFIOR=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00F2 
; 0000 00F3 // ADC initialization
; 0000 00F4 // ADC disabled
; 0000 00F5 ADCSRA=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 00F6 
; 0000 00F7 // SPI initialization
; 0000 00F8 // SPI disabled
; 0000 00F9 SPCR=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00FA 
; 0000 00FB // TWI initialization
; 0000 00FC // TWI disabled
; 0000 00FD TWCR=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 00FE 
; 0000 00FF #if GLCD_DELAY_TYPE == TIMER_DELAY
; 0000 0100 // Global enable interrupts
; 0000 0101 #asm("sei")
;PCODE: $00000076 VOL: 0
	sei
;PCODE: $00000077 VOL: 0
; 0000 0102 #endif
; 0000 0103 
; 0000 0104 #if GLCD_DELAY_TYPE == TIMER_DELAY
; 0000 0105 timer_interrupt_enable = (void (*)())(timer_start);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0106 timer_interrupt_disable = (void (*)())(timer_stop);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0107 set_delay_7us = (void (*)())(set_ctc_7us);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0108 set_delay_10ms = (void (*)())(set_ctc_10ms);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0109 //glcd_free_fcn = (void (*)())(portc_tgl);
; 0000 010A #endif
; 0000 010B 
; 0000 010C glcd_define (&PORTB, &PORTA, 2, &PORTA, 3, &PORTA, 4, &PORTA, 5, &PORTA, 6, &PORTA, 7);
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 010D glcd_init ();
;PCODE: $0000009B VOL: 0
; 0000 010E while (glcd_status());
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 010F glcd_clear();
;PCODE: $000000A2 VOL: 0
; 0000 0110 while (glcd_status());
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0111 glcd_putsf (3,3,"Mehdi Zeinali");
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0112 while (glcd_status());
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0113 glcd_putbmp(glcd_intro_bmp);
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0114 while (glcd_status());
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 0115 delay_ms(1000);
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0116 glcd_clear();
;PCODE: $000000C3 VOL: 0
; 0000 0117 
; 0000 0118 while (1)
;PCODE: $000000C4 VOL: 0
; 0000 0119       {
; 0000 011A       // Place your code here
; 0000 011B       }
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 011C }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
