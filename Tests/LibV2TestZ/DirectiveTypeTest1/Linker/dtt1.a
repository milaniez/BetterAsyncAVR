;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/23/2011
;Author  : NeVaDa
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 16.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define D1  do\
;            {\
;                #asm("MOV R30,R2")\
;                #asm("MOV R31,R3")\
;                #asm("IJMP")\
;            }\
;            while (0)
;
;#define D2  if (a)\
;            {\
;                b = 'A';\
;                D1;\
;            }\
;            else\
;                lcd_putchar('B')
;
;#define D3  lcd_putchar('C');\
;            D2
;
;char a,b;
;register unsigned int JmpDest @0x02;
;
;
;// Declare your global variables here
;
;void main(void)
; 0000 0037 {

	.CSEG
;PCODE: $0000000D VOL: 0
; 0000 0038 // Declare your local variables here
; 0000 0039 
; 0000 003A // Input/Output Ports initialization
; 0000 003B // Port A initialization
; 0000 003C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 003D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 003E PORTA=0x00;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 003F DDRA=0x00;
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0040 
; 0000 0041 // Port B initialization
; 0000 0042 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0043 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0044 PORTB=0x00;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0045 DDRB=0x00;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0046 
; 0000 0047 // Port C initialization
; 0000 0048 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0049 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004A PORTC=0x00;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 004B DDRC=0x00;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 004C 
; 0000 004D // Port D initialization
; 0000 004E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0050 PORTD=0x00;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0051 DDRD=0x00;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0052 
; 0000 0053 // Alphanumeric LCD initialization
; 0000 0054 // Connections specified in the
; 0000 0055 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 0056 // RS - PORTA Bit 0
; 0000 0057 // RD - PORTA Bit 1
; 0000 0058 // EN - PORTA Bit 2
; 0000 0059 // D4 - PORTA Bit 4
; 0000 005A // D5 - PORTA Bit 5
; 0000 005B // D6 - PORTA Bit 6
; 0000 005C // D7 - PORTA Bit 7
; 0000 005D // Characters/line: 16
; 0000 005E lcd_init(16);
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005F lcd_clear();
;PCODE: $00000021 VOL: 0
; 0000 0060 
; 0000 0061 #asm
;PCODE: $00000022 VOL: 0
; 0000 0062     PUSH R16
    PUSH R16
;PCODE: $00000023 VOL: 0
; 0000 0063     PUSH R17
    PUSH R17
;PCODE: $00000024 VOL: 0
; 0000 0064 

;PCODE: $00000025 VOL: 0
; 0000 0065     LDI R16, LOW(Dest)
    LDI R16, LOW(Dest)
;PCODE: $00000026 VOL: 0
; 0000 0066     LDI R17, HIGH(Dest)
    LDI R17, HIGH(Dest)
;PCODE: $00000027 VOL: 0
; 0000 0067     MOV R2,  R16
    MOV R2,  R16
;PCODE: $00000028 VOL: 0
; 0000 0068     MOV R3,  R17
    MOV R3,  R17
;PCODE: $00000029 VOL: 0
; 0000 0069 

;PCODE: $0000002A VOL: 0
; 0000 006A     POP R17
    POP R17
;PCODE: $0000002B VOL: 0
; 0000 006B     POP R16
    POP R16
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 006C #endasm
; 0000 006D 
; 0000 006E a = 1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 006F D3;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
	MOV R30,R2
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
	MOV R31,R3
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
	IJMP
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0070 
; 0000 0071 lcd_putsf("#FUCK!#");
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0072 while (1);
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0073 
; 0000 0074 #asm
;PCODE: $0000004F VOL: 0
; 0000 0075 Dest:
Dest:
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0076 #endasm
; 0000 0077 
; 0000 0078 lcd_putsf("#MzZ!!#");
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0079 lcd_putchar(b);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007A 
; 0000 007B while (1)
;PCODE: $00000058 VOL: 0
; 0000 007C       {
; 0000 007D       // Place your code here
; 0000 007E 
; 0000 007F       }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0080 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
