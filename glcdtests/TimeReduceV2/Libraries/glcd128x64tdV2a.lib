#include <string.h>
#ifndef _ATXMEGA_DEVICE_
#include <iobits.h>
#endif

// Global Variables
static unsigned char *glcd_data_address;
static unsigned char *glcd_rs_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rs_bit_msk;
#else
static unsigned char glcd_rs_bit_pos;
#endif
static unsigned char *glcd_rw_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rw_bit_msk;
#else
static unsigned char glcd_rw_bit_pos;
#endif
static unsigned char *glcd_en_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_en_bit_msk;
#else
static unsigned char glcd_en_bit_pos;
#endif
static unsigned char *glcd_cs1_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_cs1_bit_msk;
#else
static unsigned char glcd_cs1_bit_pos;
#endif
static unsigned char *glcd_cs2_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_cs2_bit_msk;
#else
static unsigned char glcd_cs2_bit_pos;
#endif
static unsigned char *glcd_rst_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rst_bit_msk;
#else
static unsigned char glcd_rst_bit_pos;
#endif

flash char glcd_font [91][6] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
    { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 },   // !
    { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 },   // "
    { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 },   // #
    { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 },   // $
    { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 },   // %
    { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 },   // &
    { 0x00, 0x05, 0x03, 0x00, 0x00, 0x00 },   // '
    { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 },   // (
    { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 },   // )
    { 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00 },   // *
    { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 },   // +
    { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 },   // ,
    { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },   // -
    { 0x00, 0x30, 0x30, 0x00, 0x00, 0x00 },   // .
    { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 },   // /
    { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 },   // 0
    { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 },   // 1
    { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 },   // 2
    { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 },   // 3
    { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 },   // 4
    { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 },   // 5
    { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 },   // 6
    { 0x01, 0x71, 0x09, 0x05, 0x03, 0x00 },   // 7
    { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 },   // 8
    { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 },   // 9
    { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 },   // :
    { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 },   // ;
    { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 },   // =
    { 0x41, 0x22, 0x14, 0x08, 0x00, 0x00 },   // >
    { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 },   // ?
    { 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 },   // @
    { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 },   // A
    { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 },   // B
    { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 },   // C
    { 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00 },   // D
    { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 },   // E
    { 0x7F, 0x09, 0x09, 0x01, 0x01, 0x00 },   // F
    { 0x3E, 0x41, 0x41, 0x51, 0x32, 0x00 },   // G
    { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 },   // H
    { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 },   // I
    { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 },   // J
    { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 },   // K
    { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 },   // L
    { 0x7F, 0x02, 0x04, 0x02, 0x7F, 0x00 },   // M
    { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 },   // N
    { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 },   // O
    { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 },   // P
    { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 },   // Q
    { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 },   // R
    { 0x46, 0x49, 0x49, 0x49, 0x31, 0x00 },   // S
    { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 },   // T
    { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 },   // U
    { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 },   // V
    { 0x7F, 0x20, 0x18, 0x20, 0x7F, 0x00 },   // W
    { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 },   // X
    { 0x03, 0x04, 0x78, 0x04, 0x03, 0x00 },   // Y
    { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 },   // Z
    { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 },   // 55
    { 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00 },   // ]
    { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 },   // ^
    { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 },   // _
    { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 },   // '
    { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 },   // a
    { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 },   // b
    { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 },   // c
    { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 },   // d
    { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 },   // e
    { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 },   // f
    { 0x08, 0x14, 0x54, 0x54, 0x3C, 0x00 },   // g
    { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 },   // h
    { 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00 },   // i
    { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 },   // j
    { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 },   // l
    { 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00 },   // m
    { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 },   // n
    { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 },   // o
    { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 },   // p
    { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 },   // q
    { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 },   // r
    { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 },   // s
    { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 },   // t
    { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 },   // u
    { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 },   // v
    { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 },   // w
    { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 },   // x
    { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 },   // y
    { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }    // z
};

// Bit Control
#ifdef _ATXMEGA_DEVICE_
#define set_rs  *(glcd_rs_address  + 0x01) = glcd_rs_bit_msk
#define set_rw  *(glcd_rw_address  + 0x01) = glcd_rw_bit_msk
#define set_en  *(glcd_en_address  + 0x01) = glcd_en_bit_msk
#define set_cs1 *(glcd_cs1_address + 0x01) = glcd_cs1_bit_msk
#define set_cs2 *(glcd_cs2_address + 0x01) = glcd_cs2_bit_msk
#define set_rst *(glcd_rst_address + 0x01) = glcd_rst_bit_msk
#define clr_rs  *(glcd_rs_address  + 0x02) = glcd_rs_bit_msk
#define clr_rw  *(glcd_rw_address  + 0x02) = glcd_rw_bit_msk
#define clr_en  *(glcd_en_address  + 0x02) = glcd_en_bit_msk
#define clr_cs1 *(glcd_cs1_address + 0x02) = glcd_cs1_bit_msk
#define clr_cs2 *(glcd_cs2_address + 0x02) = glcd_cs2_bit_msk
#define clr_rst *(glcd_rst_address + 0x02) = glcd_rst_bit_msk
#define tgl_rs  *(glcd_rs_address  + 0x03) = glcd_rs_bit_msk
#define tgl_rw  *(glcd_rw_address  + 0x03) = glcd_rw_bit_msk
#define tgl_en  *(glcd_en_address  + 0x03) = glcd_en_bit_msk
#define tgl_cs1 *(glcd_cs1_address + 0x03) = glcd_cs1_bit_msk
#define tgl_cs2 *(glcd_cs2_address + 0x03) = glcd_cs2_bit_msk
#define tgl_rst *(glcd_rst_address + 0x03) = glcd_rst_bit_msk
#else
#define set_rs  SETBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define set_rw  SETBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define set_en  SETBIT(*glcd_en_address, glcd_en_bit_pos)
#define set_cs1 SETBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define set_cs2 SETBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define set_rst SETBIT(*glcd_rst_address,glcd_rst_bit_pos)
#define clr_rs  CLRBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define clr_rw  CLRBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define clr_en  CLRBIT(*glcd_en_address, glcd_en_bit_pos)
#define clr_cs1 CLRBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define clr_cs2 CLRBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define clr_rst CLRBIT(*glcd_rst_address,glcd_rst_bit_pos)
#define tgl_rs  TGLBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define tgl_rw  TGLBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define tgl_en  TGLBIT(*glcd_en_address, glcd_en_bit_pos)
#define tgl_cs1 TGLBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define tgl_cs2 TGLBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define tgl_rst TGLBIT(*glcd_rst_address,glcd_rst_bit_pos)
#endif

// External (user's) functions
void glcd_define (unsigned char *glcd_data_port_address,
                  unsigned char *glcd_rs_port_address,  unsigned char glcd_rs_pin,
                  unsigned char *glcd_rw_port_address,  unsigned char glcd_rw_pin,
                  unsigned char *glcd_en_port_address,  unsigned char glcd_en_pin,
                  unsigned char *glcd_cs1_port_address, unsigned char glcd_cs1_pin,
                  unsigned char *glcd_cs2_port_address, unsigned char glcd_cs2_pin,
                  unsigned char *glcd_rst_port_address, unsigned char glcd_rst_pin)
{
	glcd_data_address = glcd_data_port_address;
	glcd_rs_address   = glcd_rs_port_address;
	glcd_rw_address   = glcd_rw_port_address;
	glcd_en_address   = glcd_en_port_address;
	glcd_cs1_address  = glcd_cs1_port_address;
	glcd_cs2_address  = glcd_cs2_port_address;
	glcd_rst_address  = glcd_rst_port_address;
#ifdef _ATXMEGA_DEVICE_
	glcd_rs_bit_msk  = 0b00000001 << glcd_rs_pin;
	glcd_rw_bit_msk  = 0b00000001 << glcd_rw_pin;
	glcd_en_bit_msk  = 0b00000001 << glcd_en_pin;
	glcd_cs1_bit_msk = 0b00000001 << glcd_cs1_pin;
	glcd_cs2_bit_msk = 0b00000001 << glcd_cs2_pin;
	glcd_rst_bit_msk = 0b00000001 << glcd_rst_pin;
	// Set all the pins as output
	*(glcd_data_address - 0x03) = 0xFF;
	*(glcd_rs_address - 0x03)   = glcd_rs_bit_msk;
	clr_rw;
	*(glcd_rw_address - 0x03)   = glcd_rw_bit_msk;
	*(glcd_en_address - 0x03)   = glcd_en_bit_msk;
	*(glcd_cs1_address - 0x03)  = glcd_cs1_bit_msk;
	*(glcd_cs2_address - 0x03)  = glcd_cs2_bit_msk;
	*(glcd_rst_address - 0x03)  = glcd_rst_bit_msk;
#else
	glcd_rs_bit_pos  = glcd_rs_pin;
	glcd_rw_bit_pos  = glcd_rw_pin;
	glcd_en_bit_pos  = glcd_en_pin;
	glcd_cs1_bit_pos = glcd_cs1_pin;
	glcd_cs2_bit_pos = glcd_cs2_pin;
	glcd_rst_bit_pos = glcd_rst_pin;
	// Sets the pins as output
	*(glcd_data_address - 1) = 0xFF;
	SETBIT (*(glcd_rs_address - 0x01),glcd_rs_bit_pos);
	SETBIT (*(glcd_rw_address - 0x01),glcd_rw_bit_pos);
	clr_rw;
	SETBIT (*(glcd_en_address - 0x01),glcd_en_bit_pos);
	SETBIT (*(glcd_cs1_address - 0x01),glcd_cs1_bit_pos);
	SETBIT (*(glcd_cs2_address - 0x01),glcd_cs2_bit_pos);
	SETBIT (*(glcd_rst_address - 0x01),glcd_rst_bit_pos);
#endif
}

#define NumberOfCases 28

#define DelayCase1Index 0
inline void DelayCase1 (void)
{
	
}

#define DelayCase2Index 1
inline void DelayCase2 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

#define Case0Index 
inline void Case0 (void)
{

}

void (* CasePointer[NumberOfCases]) () =
{
	(void (*)())();
};

void glcd_timer_isr (void)
{
	
}