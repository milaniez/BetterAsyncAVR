#ifndef _ATXMEGA_DEVICE_
#include <iobits.h>
#endif

// Global Variables
static unsigned char *glcd_data_address;
static unsigned char *glcd_rs_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rs_bit_msk;
#else
static unsigned char glcd_rs_bit_pos;
#endif
static unsigned char *glcd_rw_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rw_bit_msk;
#else
static unsigned char glcd_rw_bit_pos;
#endif
static unsigned char *glcd_en_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_en_bit_msk;
#else
static unsigned char glcd_en_bit_pos;
#endif
static unsigned char *glcd_cs1_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_cs1_bit_msk;
#else
static unsigned char glcd_cs1_bit_pos;
#endif
static unsigned char *glcd_cs2_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_cs2_bit_msk;
#else
static unsigned char glcd_cs2_bit_pos;
#endif
static unsigned char *glcd_rst_address;
#ifdef _ATXMEGA_DEVICE_
static unsigned char glcd_rst_bit_msk;
#else
static unsigned char glcd_rst_bit_pos;
#endif

flash char glcd_font [91][6] =
{
    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
    { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 },   // !
    { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 },   // "
    { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 },   // #
    { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 },   // $
    { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 },   // %
    { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 },   // &
    { 0x00, 0x05, 0x03, 0x00, 0x00, 0x00 },   // '
    { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 },   // (
    { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 },   // )
    { 0x08, 0x2A, 0x1C, 0x2A, 0x08, 0x00 },   // *
    { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 },   // +
    { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 },   // ,
    { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 },   // -
    { 0x00, 0x30, 0x30, 0x00, 0x00, 0x00 },   // .
    { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 },   // /
    { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 },   // 0
    { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 },   // 1
    { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 },   // 2
    { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 },   // 3
    { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 },   // 4
    { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 },   // 5
    { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 },   // 6
    { 0x01, 0x71, 0x09, 0x05, 0x03, 0x00 },   // 7
    { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 },   // 8
    { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 },   // 9
    { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 },   // :
    { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 },   // ;
    { 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 },   // =
    { 0x41, 0x22, 0x14, 0x08, 0x00, 0x00 },   // >
    { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 },   // ?
    { 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 },   // @
    { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 },   // A
    { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 },   // B
    { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 },   // C
    { 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00 },   // D
    { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 },   // E
    { 0x7F, 0x09, 0x09, 0x01, 0x01, 0x00 },   // F
    { 0x3E, 0x41, 0x41, 0x51, 0x32, 0x00 },   // G
    { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 },   // H
    { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 },   // I
    { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 },   // J
    { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 },   // K
    { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 },   // L
    { 0x7F, 0x02, 0x04, 0x02, 0x7F, 0x00 },   // M
    { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 },   // N
    { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 },   // O
    { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 },   // P
    { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 },   // Q
    { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 },   // R
    { 0x46, 0x49, 0x49, 0x49, 0x31, 0x00 },   // S
    { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 },   // T
    { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 },   // U
    { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 },   // V
    { 0x7F, 0x20, 0x18, 0x20, 0x7F, 0x00 },   // W
    { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 },   // X
    { 0x03, 0x04, 0x78, 0x04, 0x03, 0x00 },   // Y
    { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 },   // Z
    { 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
    { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 },   // 55
    { 0x41, 0x41, 0x7F, 0x00, 0x00, 0x00 },   // ]
    { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 },   // ^
    { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 },   // _
    { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 },   // '
    { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 },   // a
    { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 },   // b
    { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 },   // c
    { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 },   // d
    { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 },   // e
    { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 },   // f
    { 0x08, 0x14, 0x54, 0x54, 0x3C, 0x00 },   // g
    { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 },   // h
    { 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00 },   // i
    { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 },   // j
    { 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
    { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 },   // l
    { 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00 },   // m
    { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 },   // n
    { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 },   // o
    { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 },   // p
    { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 },   // q
    { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 },   // r
    { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 },   // s
    { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 },   // t
    { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 },   // u
    { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 },   // v
    { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 },   // w
    { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 },   // x
    { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 },   // y
    { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }    // z
};

// Bit Control
#ifdef _ATXMEGA_DEVICE_
#define set_rs  *(glcd_rs_address  + 0x01) = glcd_rs_bit_msk
#define set_rw  *(glcd_rw_address  + 0x01) = glcd_rw_bit_msk
#define set_en  *(glcd_en_address  + 0x01) = glcd_en_bit_msk
#define set_cs1 *(glcd_cs1_address + 0x01) = glcd_cs1_bit_msk
#define set_cs2 *(glcd_cs2_address + 0x01) = glcd_cs2_bit_msk
#define set_rst *(glcd_rst_address + 0x01) = glcd_rst_bit_msk
#define clr_rs  *(glcd_rs_address  + 0x02) = glcd_rs_bit_msk
#define clr_rw  *(glcd_rw_address  + 0x02) = glcd_rw_bit_msk
#define clr_en  *(glcd_en_address  + 0x02) = glcd_en_bit_msk
#define clr_cs1 *(glcd_cs1_address + 0x02) = glcd_cs1_bit_msk
#define clr_cs2 *(glcd_cs2_address + 0x02) = glcd_cs2_bit_msk
#define clr_rst *(glcd_rst_address + 0x02) = glcd_rst_bit_msk
#define tgl_rs  *(glcd_rs_address  + 0x03) = glcd_rs_bit_msk
#define tgl_rw  *(glcd_rw_address  + 0x03) = glcd_rw_bit_msk
#define tgl_en  *(glcd_en_address  + 0x03) = glcd_en_bit_msk
#define tgl_cs1 *(glcd_cs1_address + 0x03) = glcd_cs1_bit_msk
#define tgl_cs2 *(glcd_cs2_address + 0x03) = glcd_cs2_bit_msk
#define tgl_rst *(glcd_rst_address + 0x03) = glcd_rst_bit_msk
#else
#define set_rs  SETBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define set_rw  SETBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define set_en  SETBIT(*glcd_en_address, glcd_en_bit_pos)
#define set_cs1 SETBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define set_cs2 SETBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define set_rst SETBIT(*glcd_rst_address,glcd_rst_bit_pos)
#define clr_rs  CLRBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define clr_rw  CLRBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define clr_en  CLRBIT(*glcd_en_address, glcd_en_bit_pos)
#define clr_cs1 CLRBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define clr_cs2 CLRBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define clr_rst CLRBIT(*glcd_rst_address,glcd_rst_bit_pos)
#define tgl_rs  TGLBIT(*glcd_rs_address, glcd_rs_bit_pos)
#define tgl_rw  TGLBIT(*glcd_rw_address, glcd_rw_bit_pos)
#define tgl_en  TGLBIT(*glcd_en_address, glcd_en_bit_pos)
#define tgl_cs1 TGLBIT(*glcd_cs1_address,glcd_cs1_bit_pos)
#define tgl_cs2 TGLBIT(*glcd_cs2_address,glcd_cs2_bit_pos)
#define tgl_rst TGLBIT(*glcd_rst_address,glcd_rst_bit_pos)
#endif

#define NumberOfCases 33
         unsigned int  CaseAddress[NumberOfCases];
register unsigned int  CaseAddressIndex @0x02; //R3:R2
#define  GotoAddress   CaseAddressIndex

// External (user's) functions
void glcd_define (unsigned char *glcd_data_port_address,
                  unsigned char *glcd_rs_port_address,  unsigned char glcd_rs_pin,
                  unsigned char *glcd_rw_port_address,  unsigned char glcd_rw_pin,
                  unsigned char *glcd_en_port_address,  unsigned char glcd_en_pin,
                  unsigned char *glcd_cs1_port_address, unsigned char glcd_cs1_pin,
                  unsigned char *glcd_cs2_port_address, unsigned char glcd_cs2_pin,
                  unsigned char *glcd_rst_port_address, unsigned char glcd_rst_pin)
{
	glcd_data_address = glcd_data_port_address;
	glcd_rs_address   = glcd_rs_port_address;
	glcd_rw_address   = glcd_rw_port_address;
	glcd_en_address   = glcd_en_port_address;
	glcd_cs1_address  = glcd_cs1_port_address;
	glcd_cs2_address  = glcd_cs2_port_address;
	glcd_rst_address  = glcd_rst_port_address;
#ifdef _ATXMEGA_DEVICE_
	glcd_rs_bit_msk  = 0b00000001 << glcd_rs_pin;
	glcd_rw_bit_msk  = 0b00000001 << glcd_rw_pin;
	glcd_en_bit_msk  = 0b00000001 << glcd_en_pin;
	glcd_cs1_bit_msk = 0b00000001 << glcd_cs1_pin;
	glcd_cs2_bit_msk = 0b00000001 << glcd_cs2_pin;
	glcd_rst_bit_msk = 0b00000001 << glcd_rst_pin;
	// Set all the pins as output
	*(glcd_data_address - 0x03) = 0xFF;
	*(glcd_rs_address - 0x03)   = glcd_rs_bit_msk;
	clr_rw;
	*(glcd_rw_address - 0x03)   = glcd_rw_bit_msk;
	*(glcd_en_address - 0x03)   = glcd_en_bit_msk;
	*(glcd_cs1_address - 0x03)  = glcd_cs1_bit_msk;
	*(glcd_cs2_address - 0x03)  = glcd_cs2_bit_msk;
	*(glcd_rst_address - 0x03)  = glcd_rst_bit_msk;
#else
	glcd_rs_bit_pos  = glcd_rs_pin;
	glcd_rw_bit_pos  = glcd_rw_pin;
	glcd_en_bit_pos  = glcd_en_pin;
	glcd_cs1_bit_pos = glcd_cs1_pin;
	glcd_cs2_bit_pos = glcd_cs2_pin;
	glcd_rst_bit_pos = glcd_rst_pin;
	// Sets the pins as output
	*(glcd_data_address - 1) = 0xFF;
	SETBIT (*(glcd_rs_address - 0x01),glcd_rs_bit_pos);
	SETBIT (*(glcd_rw_address - 0x01),glcd_rw_bit_pos);
	clr_rw;
	SETBIT (*(glcd_en_address - 0x01),glcd_en_bit_pos);
	SETBIT (*(glcd_cs1_address - 0x01),glcd_cs1_bit_pos);
	SETBIT (*(glcd_cs2_address - 0x01),glcd_cs2_bit_pos);
	SETBIT (*(glcd_rst_address - 0x01),glcd_rst_bit_pos);
#endif
#asm
	LDI		R30, LOW(_CaseAddress)
	LDI     R31, HIGH(_CaseAddress)
	;//Load #1 case for delay function
	LDI     R2,  LOW(DelayLabel1)
	LDI		R3,  HIGH(DelayLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	;//Load #2 case for delay function
	LDI     R2,  LOW(DelayLabel2)
	LDI		R3,  HIGH(DelayLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdUnlockLockLabel1)
	LDI		R3,  HIGH(GlcdUnlockLockLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdUnlockLockLabel2)
	LDI		R3,  HIGH(GlcdUnlockLockLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdUnlockLockLabel3)
	LDI		R3,  HIGH(GlcdUnlockLockLabel3)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel1)
	LDI		R3,  HIGH(GlcdInitLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel2)
	LDI		R3,  HIGH(GlcdInitLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel3)
	LDI		R3,  HIGH(GlcdInitLabel3)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel4)
	LDI		R3,  HIGH(GlcdInitLabel4)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel5)
	LDI		R3,  HIGH(GlcdInitLabel5)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel6)
	LDI		R3,  HIGH(GlcdInitLabel6)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel7)
	LDI		R3,  HIGH(GlcdInitLabel7)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdInitLabel8)
	LDI		R3,  HIGH(GlcdInitLabel8)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdWriteByteLabel1)
	LDI		R3,  HIGH(GlcdWriteByteLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdWriteByteLabel2)
	LDI		R3,  HIGH(GlcdWriteByteLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdWriteByteLabel3)
	LDI		R3,  HIGH(GlcdWriteByteLabel3)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdWriteByteLabel4)
	LDI		R3,  HIGH(GlcdWriteByteLabel4)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdClearPageLabel1)
	LDI		R3,  HIGH(GlcdClearPageLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdClearPageLabel2)
	LDI		R3,  HIGH(GlcdClearPageLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutcharLabel1)
	LDI		R3,  HIGH(GlcdPutcharLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutcharLabel2)
	LDI		R3,  HIGH(GlcdPutcharLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsLabel1)
	LDI		R3,  HIGH(GlcdPutsLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsLabel2)
	LDI		R3,  HIGH(GlcdPutsLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsCenterLabel1)
	LDI		R3,  HIGH(GlcdPutsCenterLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsCenterLabel2)
	LDI		R3,  HIGH(GlcdPutsCenterLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsfLabel1)
	LDI		R3,  HIGH(GlcdPutsfLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsfLabel2)
	LDI		R3,  HIGH(GlcdPutsfLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsfCenterLabel1)
	LDI		R3,  HIGH(GlcdPutsfCenterLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutsfCenterLabel2)
	LDI		R3,  HIGH(GlcdPutsfCenterLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdClearLabel1)
	LDI		R3,  HIGH(GlcdClearLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdClearLabel2)
	LDI		R3,  HIGH(GlcdClearLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutbmpLabel1)
	LDI		R3,  HIGH(GlcdPutbmpLabel1)
	ST		Z+,  R2
	ST		Z+,  R3
	
	LDI     R2,  LOW(GlcdPutbmpLabel2)
	LDI		R3,  HIGH(GlcdPutbmpLabel2)
	ST		Z+,  R2
	ST		Z+,  R3
#endasm
}

// Timer function pointers
void (*timer_interrupt_enable) (void);

void (*timer_interrupt_disable) (void);

void (*set_delay_7us) (void);

void (*set_delay_10ms) (void);

#define StackSize     6
enum cases
{
	DelayCase1 = 0,
	DelayCase2,
	GlcdUnlockLockCase1,
	GlcdUnlockLockCase2,
	GlcdUnlockLockCase3,
	GlcdInitCase1,
	GlcdInitCase2,
	GlcdInitCase3,
	GlcdInitCase4,
	GlcdInitCase5,
	GlcdInitCase6,
	GlcdInitCase7,
	GlcdInitCase8,
	GlcdWriteByteCase1,
	GlcdWriteByteCase2,
	GlcdWriteByteCase3,
	GlcdWriteByteCase4,
	GlcdClearPageCase1,
	GlcdClearPageCase2,
	GlcdPutcharCase1,
	GlcdPutcharCase2,
	GlcdPutsCase1,
	GlcdPutsCase2,
	GlcdPutsCenterCase1,
	GlcdPutsCenterCase2,
	GlcdPutsfCase1,
	GlcdPutsfCase2,
	GlcdPutsfCenterCase1,
	GlcdPutsfCenterCase2,
	GlcdClearCase1,
	GlcdClearCase2,
	GlcdPutbmpCase1,
	GlcdPutbmpCase2
} CaseStack[StackSize];
unsigned char StackPointer = 0xFF;
#define GlcdBusy (~StackPointer)

unsigned char PushCase (char Case)
{
	if ((StackPointer + 1) < StackSize)
	{
		StackPointer++;
		CaseStack[StackPointer] = Case;
		return 0;
	}
	else
		return 1;
}

unsigned char PopCase (void)
{
	if (!(~StackPointer))
	{
		StackPointer--;
		return 0;
	}
	else
		return 1;
}

unsigned char strlen (unsigned char *str)
{
	unsigned char i;
	for (i = 0; *str++ != 0;i++);
	return i;
}

unsigned char strlenf (flash unsigned char *str)
{
	unsigned char i;
	for (i = 0; *str++ != 0;i++);
	return i;
}

#define	IndirectGoto	do\
						{\
							#asm("MOV	R30, R2")\
							#asm("MOV	R31, R3")\
							#asm("IJMP")\
						} while (0)

#define GotoNextCase	if (!(~StackPointer))\
						{\
						    GotoAddress = CaseAddress[CaseStack[StackPointer]];\
							IndirectGoto;\
					    }\
						else\
						    return

#define SetCurrentCase(CCase)	CaseStack[StackPointer] = CCase

#define StackPlus(Case,Label)	do\
                                {\
                                    SetCurrentCase(Case);\
								    StackPointer++;\
								    goto Label;\
                                } while (0)

#define StackMinus()			PopCase();\
								GotoNextCase

unsigned char GlcdPage;
unsigned char GlcdColumn;
unsigned char GlcdDataByte;
unsigned char GlcdChar;
unsigned char *GlcdString;
flash unsigned char *GlcdFlashString;
flash unsigned char *GlcdFlashPointer;

unsigned char glcd_status (void)
{
    
}


void glcd_timer_isr (void)
{
	unsigned char i;
	unsigned int  j;
	if (~StackPointer)
	{
		if (!StackPointer)
		{
			GotoNextCase;
		}
/////////////////////////////////////////////////////////////////////////
#asm
DelayLabel2:
#endasm
DelayLabel2:
		(*timer_interrupt_disable)();
		StackMinus();
#asm
DelayLabel1:
#endasm
DelayLabel2:
		SetCurrentCase(DelayCase2);
		(*timer_interrupt_enable)();
		return;
#asm
GlcdUnlockLockLabel3:
#endasm
GlcdUnlockLockLabel3:
		clr_en;
		StackMinus();
#asm
GlcdUnlockLockLabel2:
#endasm
GlcdUnlockLockLabel2:
		set_en;
		StackPlus(GlcdUnlockLockCase3,DelayLabel1);
#asm
GlcdUnlockLockLabel1:
#endasm
GlcdUnlockLockLabel1:
		(*set_delay_7us)();
		StackPlus(GlcdUnlockLockCase3,DelayLabel1);
#asm
GlcdInitLabel8:
#endasm
GlcdInitLabel8:
		StackMinus();
#asm
GlcdInitLabel7:
#endasm
GlcdInitLabel7:
		tgl_cs1;
		tgl_cs2;
		*glcd_data_address = 0x3E;
		StackPlus(GlcdInitCase4,GlcdUnlockLockLabel1);
#asm
GlcdInitLabel6:
#endasm
GlcdInitLabel6:
		*glcd_data_address = 0x3F;
		i++;
		if (i < 2)
			SetCurrentCase(GlcdInitCase7);
		else
			SetCurrentCase(GlcdInitCase8);
		StackPointer++;
		#asm("JMP GlcdUnlockLockLabel1")
#asm
GlcdInitLabel5:
#endasm
GlcdInitLabel5:
		*glcd_data_address = 0xB8;
		StackPlus(GlcdInitCase6,GlcdUnlockLockLabel1);
#asm
GlcdInitLabel4:
#endasm
GlcdInitLabel4:
		*glcd_data_address = 0x40;
		StackPlus(GlcdInitCase5,GlcdUnlockLockLabel1);
#asm
GlcdInitLabel3:
#endasm
GlcdInitLabel3:
		clr_rs;
		clr_cs1;
		set_cs2;
		*glcd_data_address = 0x3E;
		StackPlus(GlcdInitCase4,GlcdUnlockLockLabel1);
#asm
GlcdInitLabel2:
#endasm
GlcdInitLabel2:
		set_rst;
		StackPlus(GlcdInitCase3,DelayLabel1);
#asm
GlcdInitLabel1:
#endasm
GlcdInitLabel1:
		i = 0;
		clr_rst;
		(*set_delay_10ms)();
		StackPlus(GlcdInitCase2,DelayLabel1);
#asm
GlcdWriteByteLabel4:
#endasm
GlcdWriteByteLabel4:
		StackMinus();
#asm
GlcdWriteByteLabel3:
#endasm
GlcdWriteByteLabel3:
		set_rs;
		clr_rw;
		*glcd_data_address = GlcdDataByte;
		StackPlus(GlcdWriteByteCase4,GlcdUnlockLockLabel1);
#asm
GlcdWriteByteLabel2:
#endasm
GlcdWriteByteLabel2:
		clr_rs;
		clr_rw;
		*glcd_data_address = 0x40 | GlcdColumn;
		StackPlus(GlcdWriteByteCase3,GlcdUnlockLockLabel1);
#asm
GlcdWriteByteLabel1:
#endasm
GlcdWriteByteLabel1:
		if(GlcdColumn >= 64)
		{
			clr_cs1;
			set_cs2;
		}
		else
		{
			set_cs1;
			clr_cs2;
		}
		clr_rs;
		clr_rw;
		*glcd_data_address = 0xB8 | GlcdPage;
		StackPlus(GlcdWriteByteCase2,GlcdUnlockLockLabel1);
#asm
GlcdClearPageLabel2:
#endasm
GlcdClearPageLabel2:
		GlcdColumn++;
		if (GlcdColumn < 128)
			StackPlus(GlcdClearPageCase2,GlcdWriteByteLabel1);
		else
		{
			StackMinus();
		}
#asm
GlcdClearPageLabel1:
#endasm
GlcdClearPageLabel1:
		GlcdColumn = 0;
		GlcdDataByte = 0x00;
		StackPlus(GlcdClearPageCase2,GlcdWriteByteLabel1);
#asm
GlcdPutcharLabel2:
#endasm
GlcdPutcharLabel2:
		if (++i < 6)
		{
			GlcdColumn++;
			StackPlus(GlcdClearPageCase2,GlcdWriteByteLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutcharLabel1:
#endasm
GlcdPutcharLabel1:
		i = 0;
		GlcdChar -= 0x20;
		StackPlus(GlcdPutcharCase2,GlcdWriteByteLabel1);
#asm
GlcdPutsLabel2:
#endasm
GlcdPutsLabel2:
		if (*GlcdString)
		{
			GlcdColumn++;
			GlcdChar = *GlcdString++;
			StackPlus(GlcdPutsCase2,GlcdPutcharLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutsLabel1:
#endasm
GlcdPutsLabel1:
		if (*GlcdString)
		{
			GlcdChar = *GlcdString++;
			StackPlus(GlcdPutsCase2,GlcdPutcharLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutsCenterLabel2:
#endasm
GlcdPutsCenterLabel2:
		StackMinus();
#asm
GlcdPutsCenterLabel1:
#endasm
GlcdPutsCenterLabel1:
		i = strlen(GlcdString);
		i = (128 - i * 6) / 2;
		StackPlus(GlcdPutsCenterCase2,GlcdPutsLabel1);
#asm
GlcdPutsfLabel2:
#endasm
GlcdPutsfLabel2:
		if (*GlcdFlashString)
		{
			GlcdColumn++;
			GlcdChar = *GlcdFlashString++;
			StackPlus(GlcdPutsfCase2,GlcdPutcharLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutsfLabel1:
#endasm
GlcdPutsfLabel1:
		if (*GlcdFlashString)
		{
			GlcdChar = *GlcdFlashString++;
			StackPlus(GlcdPutsfCase2,GlcdPutcharLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutsfCenterLabel2:
#endasm
GlcdPutsfCenterLabel2:
		StackMinus();
#asm
GlcdPutsfCenterLabel1:
#endasm
GlcdPutsfCenterLabel1:
		i = strlenf(GlcdFlashString);
		i = (128 - i * 6) / 2;
		StackPlus(GlcdPutsfCenterCase2,GlcdPutsfLabel1);
#asm
GlcdClearLabel2:
#endasm
GlcdClearLabel2:
		if (((GlcdPage == 7) && (GlcdColumn < 127)) || (GlcdPage < 7))
		{
			GlcdColumn++;
			if (GlcdColumn == 128)
			{
				GlcdColumn = 0;
				GlcdPage++;
			}
			StackPlus(GlcdClearCase2,GlcdWriteByteLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdClearLabel1:
#endasm
GlcdClearLabel1:
		GlcdColumn = 0;
		GlcdPage = 0;
		GlcdDataByte = 0x00;
		StackPlus(GlcdClearCase2,GlcdWriteByteLabel1);
#asm
GlcdPutbmpLabel2:
#endasm
GlcdPutbmpLabel2:
		if (++j < 1024)
		{
			GlcdColumn = ((unsigned char)(j)) & 0x7F;
			GlcdPage = ((unsigned char)(j >> 7));
			GlcdDataByte = *(++GlcdFlashPointer);
			StackPlus(GlcdPutbmpCase2,GlcdWriteByteLabel1);
		}
		else
		{
			StackMinus();
		}
#asm
GlcdPutbmpLabel1:
#endasm
GlcdPutbmpLabel1:
		j = 0;
		GlcdColumn = 0;
		GlcdPage = 0;
		GlcdDataByte = *GlcdFlashPointer;
		StackPlus(GlcdPutbmpCase2,GlcdWriteByteLabel1);
	}
}



// GLCD initializing function
void glcd_init (void)
{
	PushCase (GlcdInitCase1);
	glcd_timer_isr();
}

// GLCD write byte in specific column and page function
void glcd_writebyte (unsigned char column, unsigned char page, unsigned char data)
{
	GlcdColumn = column;
	GlcdPage = page;
	GlcdDataByte = data;
	PushCase(GlcdWriteByteCase1);
	glcd_timer_isr();
}

// GLCD clear page function
void glcd_clear_page (unsigned char page)
{
	GlcdPage = page;
	PushCase (GlcdClearPageCase1);
	glcd_timer_isr();
}

// GLCD put character function
void glcd_putchar (unsigned char column, unsigned char page, unsigned char ch)
{
	GlcdColumn = column;
	GlcdPage = page;
	GlcdChar = ch;
	PushCase(GlcdPutcharCase1);
	glcd_timer_isr();
}

// GLCD put string function
void glcd_puts (unsigned char column, unsigned char page, unsigned char *str)
{
	GlcdColumn = column;
	GlcdPage = page;
	GlcdString = str;
	PushCase(GlcdPutsCase1);
	glcd_timer_isr();
}

// GLCD put string in center function
void glcd_puts_center (unsigned char page, unsigned char *str)
{
	GlcdPage = page;
	GlcdString = str;
	PushCase(GlcdPutsCenterCase1);
	glcd_timer_isr();
}

// GLCD put flash string function
void glcd_putsf (unsigned char column, unsigned char page, flash unsigned char *str)
{
	GlcdColumn = column;
	GlcdPage = page;
	GlcdFlashString = str;
	PushCase(GlcdPutsfCase1);
	glcd_timer_isr();
}

// GLCD put flash string in center function
void glcd_putsf_center (unsigned char page, flash unsigned char *str)
{
	GlcdPage = page;
	GlcdFlashString = str;
	PushCase(GlcdPutsfCenterCase1);
	glcd_timer_isr();
}

// GLCD clear function
void glcd_clear (void)
{
	PushCase(GlcdClearCase1);
	glcd_timer_isr();
}

// GLCD put bitmap function
void glcd_putbmp (flash unsigned char *bmp)
{
	GlcdFlashPointer = bmp;
	PushCase(GlcdPutbmpCase1);
	glcd_timer_isr();
}